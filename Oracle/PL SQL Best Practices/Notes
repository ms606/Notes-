              APPLICATION LEVEL WORKFLOW

Step 1: Define requirements and standards.
    a. Naming conventions and coding standards.
    b. How to write and where to write SQL statements in PL.
    c. Error management.

Step 2: Build the application foundation.
    a. Formalize a process that supports the rules to be followed.
    b. Automate the implementation of rules.
RULES ARE ABOVE MENTIONS IN STEP 1.

Step 3: Build the application iterations.
    Build small individual working programs.

Step 4: Validate the application iterations.
    a. Successful applications meets user requirements.
      Regression tests for the code and QA.
    b. Successful applications are maintainable.
      Check coding standards, combine peer reviews.
    c. Check the performance of entire application.

Depending on the source of the problem, we must then go back and “do it again.”

             SINGLE-PROGRAM CONSTRUCTIION WORKFLOW
How to write an individual program, procedure or a function.

Summary first:
1. Prepare for program construction.
2. Build an iteration of the program.
3. Test the program iteration.
4. Trace the execution of the program.
5. Debug the program.
6. Validate the program: optimize and review.

Understand the EXPLAIN plans.

Four Steps of preparing an application:
1. Validate Requirements: Know what you are supposed to build.
2. Construct Header: Think about the interface, not the implementation.
3. Define Tests: How will you know when you are done?
4. Build a test code.

Take a break after 30 minutes on a problem.

Find same pattern of in the program then generate a code and pass only
dynamic values.

Book recommendation for taking care of the host body:
1. Drink lots of water, instead of coffee, coke.... etc.
2. Take lots of break, move around, get exercise and go outside.
3. Make sure your workspace is comfortable and ergonomic.

Recommendation for conventions:
1.Identify the scope of a variable in its name:
   A global variable can be prefaced with g_ , for example.
2.Use a prefix or suffix to identify the types of structures being defined:
   Consider, for example, declarations of TYPEs: of collections, objects, records,
   REF cursors, etc. A standard approach to declaring such a structure is <name>_t.
   Types are quite different from variables; you should be able to identify the
   difference with a glance.
3.Use a readable format for your names:
  Since PL/SQL is not case-sensitive, camel notation (as in minBalanceRequired)
  is probably not a good choice for constructing names. Instead, use separators
  such as _ (underscore) to improve readability (as in min_balance_required).
4. Name procedure with the verb phrases, and functions with noun phases.
